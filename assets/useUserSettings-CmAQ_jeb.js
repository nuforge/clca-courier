import{u as P}from"./use-quasar-BSGOehGT.js";import{r as p,c as u,w as O}from"./index-DDnSiyj2.js";const h={theme:"auto",language:"en-US",notifications:{browser:!0,email:!1,issues:!0,events:!0},display:{compactMode:!1,animationsEnabled:!0,autoplayVideos:!1,sideMenuCollapsed:!1},pdf:{defaultZoom:1,pageLayout:"facing",thumbnailSize:"medium"}},L="clca-courier-storage",j=1,S="user-settings",g="app-cache";class C{db=null;initPromise=null;constructor(){this.initPromise=this.initializeDB()}serializeForIndexedDB(t){try{return JSON.parse(JSON.stringify(t))}catch(e){throw console.warn("Failed to serialize data for IndexedDB:",e),new Error("Data contains non-serializable values")}}async initializeDB(){return new Promise((t,e)=>{const s=indexedDB.open(L,j);s.onerror=()=>{console.error("Failed to open IndexedDB:",s.error),e(new Error(s.error?.message||"Failed to open IndexedDB"))},s.onsuccess=()=>{this.db=s.result,t()},s.onupgradeneeded=n=>{const c=n.target.result;if(c.objectStoreNames.contains(S)||c.createObjectStore(S,{keyPath:"id"}).createIndex("userId","userId",{unique:!1}),!c.objectStoreNames.contains(g)){const r=c.createObjectStore(g,{keyPath:"key"});r.createIndex("category","category",{unique:!1}),r.createIndex("timestamp","timestamp",{unique:!1})}}})}async ensureInitialized(){this.initPromise&&await this.initPromise}getFromLocalStorage(t,e){try{const s=localStorage.getItem(t);return s?JSON.parse(s):e}catch(s){return console.warn(`Failed to parse localStorage item ${t}:`,s),e}}setToLocalStorage(t,e){try{localStorage.setItem(t,JSON.stringify(e))}catch(s){console.error(`Failed to set localStorage item ${t}:`,s)}}async getUserSettings(){const t=this.getFromLocalStorage("clca-user-settings",null);if(t)return{...h,...t};try{if(await this.ensureInitialized(),this.db){const e=await this.getFromIndexedDB(S,"default");if(e?.data){const s={...h,...e.data};return this.setToLocalStorage("clca-user-settings",s),s}}}catch(e){console.warn("Failed to load settings from IndexedDB:",e)}return h}async saveUserSettings(t){const s={...await this.getUserSettings(),...t};this.setToLocalStorage("clca-user-settings",s);try{if(await this.ensureInitialized(),this.db){const n=this.serializeForIndexedDB({id:"default",userId:"default",data:s,timestamp:Date.now()});await this.saveToIndexedDB(S,n)}}catch(n){console.error("Failed to save settings to IndexedDB:",n)}}async getTheme(){return(await this.getUserSettings()).theme}async setTheme(t){await this.saveUserSettings({theme:t})}async getNotificationSettings(){return(await this.getUserSettings()).notifications}async setNotificationSettings(t){const e=await this.getUserSettings();await this.saveUserSettings({notifications:{...e.notifications,...t}})}async getDisplaySettings(){return(await this.getUserSettings()).display}async setDisplaySettings(t){const e=await this.getUserSettings();await this.saveUserSettings({display:{...e.display,...t}})}async getPdfSettings(){return(await this.getUserSettings()).pdf}async setPdfSettings(t){const e=await this.getUserSettings();await this.saveUserSettings({pdf:{...e.pdf,...t}})}async getFromIndexedDB(t,e){if(await this.ensureInitialized(),!this.db)throw new Error("Database not initialized");return new Promise((s,n)=>{const d=this.db.transaction([t],"readonly").objectStore(t).get(e);d.onsuccess=()=>s(d.result),d.onerror=()=>n(new Error(d.error?.message||"IndexedDB get operation failed"))})}async saveToIndexedDB(t,e){if(await this.ensureInitialized(),!this.db)throw new Error("Database not initialized");return new Promise((s,n)=>{const d=this.db.transaction([t],"readwrite").objectStore(t).put(e);d.onsuccess=()=>s(),d.onerror=()=>n(new Error(d.error?.message||"IndexedDB put operation failed"))})}async cacheData(t,e,s="general",n){const c={key:t,data:e,category:s,timestamp:Date.now(),ttl:n?Date.now()+n:null};try{if(await this.ensureInitialized(),this.db){const r=this.serializeForIndexedDB(c);await this.saveToIndexedDB(g,r)}}catch(r){console.error("Failed to cache data:",r)}}async getCachedData(t){try{if(await this.ensureInitialized(),!this.db)return null;const e=await this.getFromIndexedDB(g,t);return e?e.ttl&&Date.now()>e.ttl?(await this.removeCachedData(t),null):e.data:null}catch(e){return console.error("Failed to get cached data:",e),null}}async removeCachedData(t){try{return await this.ensureInitialized(),this.db?new Promise((e,s)=>{const r=this.db.transaction([g],"readwrite").objectStore(g).delete(t);r.onsuccess=()=>e(),r.onerror=()=>s(new Error(r.error?.message||"IndexedDB delete operation failed"))}):void 0}catch(e){console.error("Failed to remove cached data:",e)}}async clearUserData(){localStorage.removeItem("clca-user-settings");try{if(await this.ensureInitialized(),this.db){const t=this.db.transaction([S,g],"readwrite");t.objectStore(S).clear(),t.objectStore(g).clear()}}catch(t){console.error("Failed to clear IndexedDB data:",t)}}async exportSettings(){const t=await this.getUserSettings();return JSON.stringify(t,null,2)}async importSettings(t){try{const e=JSON.parse(t);await this.saveUserSettings(e)}catch{throw new Error("Invalid settings format")}}}const o=new C;function k(l){return JSON.parse(JSON.stringify(l))}const i=p(h),w=p(!1),m=p(!1);let f=null;async function v(){return f||(f=(async()=>{try{m.value=!0;const l=await o.getUserSettings();i.value=l,w.value=!0}catch(l){console.error("Failed to load user settings:",l),i.value=h,w.value=!0}finally{m.value=!1}})(),f)}const J=()=>{const l=P();!w.value&&!m.value&&v();const t=u(()=>i.value.theme==="auto"?l.dark.isActive:i.value.theme==="dark"),e=u(()=>i.value.theme);O(()=>i.value.theme,a=>{a==="auto"?l.dark.set("auto"):l.dark.set(a==="dark")},{immediate:!0});async function s(a){i.value.theme=a,await o.setTheme(a)}async function n(){const y=t.value?"light":"dark";await s(y)}const c=u(()=>i.value.notifications);async function r(a){i.value.notifications={...i.value.notifications,...a},await o.setNotificationSettings(a)}const d=u(()=>i.value.display);async function D(a){i.value.display={...i.value.display,...a},await o.setDisplaySettings(a)}const I=u(()=>i.value.display.sideMenuCollapsed);async function b(a){i.value.display.sideMenuCollapsed=a,await o.setDisplaySettings({sideMenuCollapsed:a})}const x=u(()=>i.value.pdf);async function U(a){i.value.pdf={...i.value.pdf,...a},await o.setPdfSettings(a)}const B=u(()=>i.value.language);async function z(a){i.value.language=a,await o.saveUserSettings({language:a})}async function F(a){Object.assign(i.value,a),await o.saveUserSettings(a)}async function T(){i.value={...h};const a=k(i.value);await o.saveUserSettings(a)}async function E(){return o.exportSettings()}async function N(a){await o.importSettings(a);const y=await o.getUserSettings();i.value=y}return{userSettings:u(()=>i.value),isSettingsLoaded:u(()=>w.value),isSettingsLoading:u(()=>m.value),isDarkMode:t,currentTheme:e,setTheme:s,toggleDarkMode:n,notificationSettings:c,updateNotificationSettings:r,displaySettings:d,updateDisplaySettings:D,sideMenuCollapsed:I,setSideMenuCollapsed:b,pdfSettings:x,updatePdfSettings:U,currentLanguage:B,setLanguage:z,updateSettings:F,resetSettings:T,exportSettings:E,importSettings:N,initializeSettings:v}};export{J as u};
