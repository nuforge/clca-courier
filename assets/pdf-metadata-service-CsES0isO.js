import{b as y,_ as F}from"./lightweight-newsletter-service-N3_P_kRl.js";import"./index-DDm66URI.js";const S=()=>typeof window<"u"?"/clca-courier/pdf.worker.min.js":"/pdf.worker.min.js",p={getBasicConfig:h=>({url:h,disableAutoFetch:!0,disableStream:!0,httpHeaders:{},withCredentials:!1,password:void 0,length:void 0}),initializeWorker:()=>{F.workerSrc||(F.workerSrc=S(),console.log("[PDF Config] PDF.js worker initialized:",S()))},isUrlSafe:h=>h.length<=2e3,createSafeLoadingTask:h=>{if(!p.isUrlSafe(h))throw new Error(`PDF URL too long (${h.length} chars): ${h.substring(0,100)}...`);return p.initializeWorker(),y(p.getBasicConfig(h))}},M=()=>{const h=console.warn,e=console.error;return{suppress:()=>{console.warn=(t,...r)=>{typeof t=="string"&&(t.includes("getHexString")||t.includes("Indexing all PDF objects")||t.includes("invalid character")||t.includes("Warning:"))||h(t,...r)};const a=console.log;console.log=(t,...r)=>{typeof t=="string"&&(t.includes("getHexString")||t.includes("Warning:"))||a(t,...r)}},restore:()=>{console.warn=h,console.error=e}}};class C{cache=new Map;thumbnailCache=new Map;processingQueue=new Set;blacklistedFiles=new Set;failureCount=new Map;MAX_RETRY_ATTEMPTS=2;CACHE_EXPIRY_DAYS=7;constructor(){this.loadCacheFromStorage(),this.loadBlacklistFromStorage();const e=this.getProcessingStats();e.blacklisted>0&&console.log(`[PDFMetadataService] Initialized with ${e.cached} cached, ${e.blacklisted} blacklisted files`)}async extractPDFMetadata(e,a){if(this.blacklistedFiles.has(a))return this.createFallbackMetadata(a);const t=`${a}`;if(this.cache.has(t))return this.cache.get(t);if(this.processingQueue.has(a))return null;try{this.processingQueue.add(a);const r=this.failureCount.get(a)||0;if(r>=this.MAX_RETRY_ATTEMPTS)return this.addToBlacklist(a),this.createFallbackMetadata(a);console.log(`[PDFMetadataService] Processing PDF: ${a}${r>0?` (retry ${r})`:""}`);const s=M();s.suppress();try{const n=await p.createSafeLoadingTask(e).promise,o=await n.getMetadata(),i=n.numPages,c=(await n.getPage(1)).getViewport({scale:1}),l={width:c.width,height:c.height},g=c.width/c.height,m=await this.generateThumbnailFromPDF(n),b=await this.estimateFileSize(e),w=Math.max(1,Math.round(i*2)),P=this.determineContentType(a,o.info),k=this.extractTopicsFromMetadata(a,o.info),{textContent:T,searchableText:D}=await this.extractTextFromPDF(n,i),d=o.info,f={filename:a,title:d?.Title||this.extractTitleFromFilename(a),pages:i,fileSize:b,thumbnailDataUrl:m,creationDate:d?.CreationDate?.toString(),modifiedDate:d?.ModDate?.toString(),author:d?.Author?.toString(),subject:d?.Subject?.toString(),producer:d?.Producer?.toString(),creator:d?.Creator?.toString(),language:d?.Language?.toString(),keywords:d?.Keywords?.toString()?.split(",").map(x=>x.trim())||[],pageSize:l,aspectRatio:g,estimatedReadTime:w,contentType:P,extractedTopics:k,textContent:T,searchableText:D};return this.cache.set(t,f),this.thumbnailCache.set(a,m),this.failureCount.delete(a),this.saveCacheToStorage(),console.log(`[PDFMetadataService] Extracted metadata for: ${a}`),f}finally{s.restore()}}catch(r){return this.handlePDFError(a,r)}finally{this.processingQueue.delete(a)}}async generateThumbnailFromPDF(e){try{const a=await e.getPage(1),r=150/a.getViewport({scale:1}).width,s=a.getViewport({scale:r}),n=document.createElement("canvas"),o=n.getContext("2d");return n.width=s.width,n.height=s.height,await a.render({canvasContext:o,viewport:s}).promise,n.toDataURL("image/jpeg",.8)}catch(a){return console.error("[PDFMetadataService] Error generating thumbnail:",a),this.generatePlaceholderThumbnail()}}generatePlaceholderThumbnail(){const e=document.createElement("canvas"),a=e.getContext("2d");e.width=150,e.height=200;const t=a.createLinearGradient(0,0,150,200);return t.addColorStop(0,"#667eea"),t.addColorStop(1,"#764ba2"),a.fillStyle=t,a.fillRect(0,0,150,200),a.fillStyle="white",a.textAlign="center",a.font="bold 16px Arial",a.fillText("PDF",75,100),a.font="12px Arial",a.fillText("Thumbnail",75,120),e.toDataURL("image/jpeg",.8)}extractTitleFromFilename(e){const a=e.replace(/\.pdf$/i,""),t=a.match(/^(\d{4})\.(\d{2})-(.+)$/);if(t){const[,r,s]=t,n=["","January","February","March","April","May","June","July","August","September","October","November","December"],o=parseInt(s,10);return`${n[o]} ${r}`}return a.replace(/[-_]/g," ").replace(/\b\w/g,r=>r.toUpperCase())}async estimateFileSize(e){try{const t=(await fetch(e,{method:"HEAD"})).headers.get("content-length");if(t){const r=parseInt(t,10);return this.formatFileSize(r)}return"Unknown"}catch{return"Unknown"}}formatFileSize(e){if(e===0)return"0 B";const a=1024,t=["B","KB","MB","GB"],r=Math.floor(Math.log(e)/Math.log(a));return`${parseFloat((e/Math.pow(a,r)).toFixed(1))} ${t[r]}`}getCachedMetadata(e){return this.cache.get(e)||null}getCachedThumbnail(e){return this.thumbnailCache.get(e)||null}async processPDFBatch(e){console.log(`[PDFMetadataService] Processing batch of ${e.length} PDFs with throttling`);const a=[],t=[],r=3;for(let s=0;s<e.length;s+=r){const n=e.slice(s,s+r);(await Promise.allSettled(n.map(i=>this.extractPDFMetadata(i.url,i.filename)))).forEach((i,u)=>{const c=s+u;if(i.status==="fulfilled"&&i.value)a.push(i.value);else{const l=e[c];l?.filename&&!this.blacklistedFiles.has(l.filename)&&t.push(l.filename)}}),s+r<e.length&&await new Promise(i=>setTimeout(i,100))}return t.length>0&&t.length<20?console.warn(`[PDFMetadataService] Failed to process ${t.length} PDFs:`,t):t.length>=20&&console.warn(`[PDFMetadataService] Failed to process ${t.length} PDFs (likely missing files for future years)`),console.log(`[PDFMetadataService] Successfully processed ${a.length}/${e.length} PDFs`),a}saveCacheToStorage(){try{const e={};this.cache.forEach((a,t)=>{e[t]={metadata:a,timestamp:Date.now()}}),localStorage.setItem("pdf-metadata-cache",JSON.stringify(e)),localStorage.setItem("pdf-thumbnail-cache",JSON.stringify(Object.fromEntries(this.thumbnailCache)))}catch(e){console.warn("[PDFMetadataService] Failed to save cache:",e)}}loadCacheFromStorage(){try{const e=localStorage.getItem("pdf-metadata-cache"),a=localStorage.getItem("pdf-thumbnail-cache");if(e){const t=JSON.parse(e);Object.entries(t).forEach(([r,s])=>{Date.now()-s.timestamp<1440*60*1e3&&this.cache.set(r,s.metadata)})}if(a){const t=JSON.parse(a);Object.entries(t).forEach(([r,s])=>{this.thumbnailCache.set(r,s)})}console.log(`[PDFMetadataService] Loaded ${this.cache.size} cached entries`)}catch(e){console.warn("[PDFMetadataService] Failed to load cache:",e)}}clearCache(){this.cache.clear(),this.thumbnailCache.clear(),localStorage.removeItem("pdf-metadata-cache"),localStorage.removeItem("pdf-thumbnail-cache")}determineContentType(e,a){const t=e.toLowerCase(),r=a?.Subject?.toLowerCase()||"",s=a?.Title?.toLowerCase()||"";return t.includes("annual")||r.includes("annual")||s.includes("annual")?"annual":t.includes("special")||r.includes("special")||s.includes("special")||t.includes("holiday")||t.includes("summer")||t.includes("winter")?"special":"newsletter"}extractTopicsFromMetadata(e,a){const t=[],r=a?.Subject||"",s=a?.Title||"",n=a?.Keywords||"",o=e.toLowerCase();o.includes("summer")&&t.push("Summer"),o.includes("winter")&&t.push("Winter"),o.includes("spring")&&t.push("Spring"),(o.includes("fall")||o.includes("autumn"))&&t.push("Fall"),o.includes("holiday")&&t.push("Holiday"),o.includes("annual")&&t.push("Annual");const i=s.toLowerCase();i.includes("summer")&&t.push("Summer"),i.includes("winter")&&t.push("Winter"),i.includes("spring")&&t.push("Spring"),(i.includes("fall")||i.includes("autumn"))&&t.push("Fall"),i.includes("holiday")&&t.push("Holiday"),i.includes("annual")&&t.push("Annual"),i.includes("special")&&t.push("Special Issue");const u=e.match(/(\d{4})\.(\d{2})-/);if(u&&u[2]){const c=parseInt(u[2],10),l=["January","February","March","April","May","June","July","August","September","October","November","December"];if(c>=1&&c<=12){const g=l[c-1];g&&t.push(g),[12,1,2].includes(c)?t.push("Winter"):[3,4,5].includes(c)?t.push("Spring"):[6,7,8].includes(c)?t.push("Summer"):[9,10,11].includes(c)&&t.push("Fall")}}if(r){const c=r.split(/[,;]/).map(l=>l.trim()).filter(l=>l.length>2);t.push(...c)}if(n){const c=n.split(/[,;]/).map(l=>l.trim()).filter(l=>l.length>2);t.push(...c)}return Array.from(new Set(t)).slice(0,10)}handlePDFError(e,a){const t=(this.failureCount.get(e)||0)+1;this.failureCount.set(e,t);const s=(u=>typeof u=="object"&&u!==null)(a)?a:{message:String(a)},n=s.name==="InvalidPDFException"||s.message?.includes("Invalid PDF structure"),o=s.message?.includes("worker")||s.message?.includes("getHexString");return s.message?.includes("431")||s.message?.includes("Request Header Fields Too Large")||s.message?.includes("header fields too large")?(console.warn(`[PDFMetadataService] 431 error for ${e}: Header fields too large. Adding to blacklist.`),this.addToBlacklist(e),this.createFallbackMetadata(e)):((t===1||!n&&!o)&&console.error(`[PDFMetadataService] Error processing ${e} (attempt ${t}):`,n?"Invalid PDF structure":s.message||a),t>=this.MAX_RETRY_ATTEMPTS?(this.addToBlacklist(e),console.warn(`[PDFMetadataService] Added ${e} to blacklist after ${t} failed attempts`),this.createFallbackMetadata(e)):null)}createFallbackMetadata(e){const a={filename:e,title:this.extractTitleFromFilename(e),pages:0,fileSize:"Unknown",thumbnailDataUrl:this.generatePlaceholderThumbnail(),contentType:this.determineContentType(e,{}),extractedTopics:this.extractTopicsFromFilename(e),textContent:"",searchableText:""};return this.cache.set(e,a),a}addToBlacklist(e){this.blacklistedFiles.add(e),this.saveBlacklistToStorage()}loadBlacklistFromStorage(){try{const e=localStorage.getItem("pdf-blacklist");if(e){const a=JSON.parse(e);this.blacklistedFiles=new Set(a),this.blacklistedFiles.size>0&&console.log(`[PDFMetadataService] Loaded ${this.blacklistedFiles.size} blacklisted files`)}}catch(e){console.error("[PDFMetadataService] Error loading blacklist from storage:",e)}}saveBlacklistToStorage(){try{const e=Array.from(this.blacklistedFiles);localStorage.setItem("pdf-blacklist",JSON.stringify(e))}catch(e){console.error("[PDFMetadataService] Error saving blacklist to storage:",e)}}extractTopicsFromFilename(e){const a=[],t=e.match(/(\d{4})/);return t&&t[1]&&a.push(t[1]),e.includes("summer")&&a.push("Summer"),e.includes("winter")&&a.push("Winter"),e.includes("spring")&&a.push("Spring"),e.includes("fall")&&a.push("Fall"),e.includes("special")&&a.push("Special Edition"),e.includes("annual")&&a.push("Annual"),a}getBlacklistInfo(){return{count:this.blacklistedFiles.size,files:Array.from(this.blacklistedFiles)}}clearBlacklist(){this.blacklistedFiles.clear(),this.failureCount.clear(),localStorage.removeItem("pdf-blacklist"),console.log("[PDFMetadataService] Blacklist cleared")}getProcessingStats(){const e=Array.from(this.failureCount.entries()).map(([a,t])=>({filename:a,count:t})).sort((a,t)=>t.count-a.count);return{cached:this.cache.size,blacklisted:this.blacklistedFiles.size,failures:e,processing:Array.from(this.processingQueue)}}async extractTextFromPDF(e,a){try{const t=Math.min(5,a),r=[];for(let o=1;o<=t;o++)try{const c=(await(await e.getPage(o)).getTextContent()).items.map(l=>"str"in l&&typeof l.str=="string"?l.str:"").join(" ");c.trim()&&r.push(c)}catch(i){console.warn(`[PDFMetadataService] Error extracting text from page ${o}:`,i);continue}const s=r.join(`

`),n=this.cleanTextForSearch(s);return{textContent:s.substring(0,5e3),searchableText:n.substring(0,2e3)}}catch(t){return console.warn("[PDFMetadataService] Error extracting PDF text:",t),{textContent:"",searchableText:""}}}cleanTextForSearch(e){return e.toLowerCase().replace(/[^\w\s]/g," ").replace(/\s+/g," ").trim()}}const $=new C;export{$ as pdfMetadataService};
