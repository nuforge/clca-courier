import{l as e}from"./index-Cz4yoHZ0.js";async function u(){if(typeof window>"u")return;let o=0;const n=10;for(;!window.pdfjsLib&&o<n;)await new Promise(t=>setTimeout(t,100)),o++;if(window.pdfjsLib)try{window.pdfjsLib.GlobalWorkerOptions.workerSrc||(window.pdfjsLib.GlobalWorkerOptions.workerSrc="https://cdn.jsdelivr.net/npm/pdfjs-dist@3.4.120/build/pdf.worker.min.js",e.debug("PDF.js worker initialized"))}catch(t){e.warn("Failed to initialize PDF.js worker:",t)}else e.warn("PDF.js library not available after waiting")}async function D(o){const n=Date.now();try{if(e.debug(`Starting PDF.js processing for: ${o.name}`),await u(),!window.pdfjsLib)throw new Error("PDF.js library not loaded");const t=await o.arrayBuffer(),s=new Uint8Array(t),c=await window.pdfjsLib.getDocument(s).promise,i=c.numPages;e.debug(`PDF has ${i} pages`);const g=Math.min(i,3),w=[];for(let r=1;r<=g;r++)try{const l=(await(await c.getPage(r)).getTextContent()).items.map(m=>m.str).join(" ");l.trim()&&w.push(l)}catch(f){e.warn(`Failed to extract text from page ${r}:`,f)}const a=w.join(`
`).trim(),d=a?a.split(/\s+/).filter(r=>r.length>0).length:0,p=Date.now()-n;return e.success(`PDF processing completed in ${p}ms: ${i} pages, ${d} words`),{pageCount:i,textContent:a,wordCount:d,processingTime:p}}catch(t){const s=Date.now()-n;throw e.error(`PDF processing failed after ${s}ms:`,t),t}}export{D as processPdfFile};
