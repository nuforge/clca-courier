<script setup lang="ts">
import { ref, computed, watch } from 'vue';
import { useInteractiveMap } from '../composables/useInteractiveMap';
import { useMapStore } from '../stores/map-store';

// Props
interface Props {
  zoom?: number;
  panX?: number;
  panY?: number;
  showLabels?: boolean;
  showIntersections?: boolean;
  animateTransitions?: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  zoom: 1,
  panX: 0,
  panY: 0,
  showLabels: true,
  showIntersections: true,
  animateTransitions: true,
});

// Emits
const emit = defineEmits<{
  roadSelected: [roadId: string | null];
  roadHighlighted: [roadId: string | null];
  zoomChanged: [zoom: number];
}>();

// Composables
const {
  roads,
  currentTheme,
  selectedRoadId,
  selectRoad,
  highlightRoad,
  findIntersections
} = useInteractiveMap();

const mapStore = useMapStore();

// Local reactive state
const zoom = ref(props.zoom);
const panX = ref(props.panX);
const panY = ref(props.panY);

// Computed
const currentIntersections = computed(() => {
  return selectedRoadId.value ? findIntersections(selectedRoadId.value) : [];
});

// Road path data - this should match the paths from the original MapSVG.vue
const roadPaths: Record<string, string> = {
  'indian-run-court': "M2346.77,1364.62C2368.82,1356.69 2351.51,1352.23 2403.37,1371.69C2431.68,1382.31 2437.39,1364.85 2470.46,1380.7C2523.93,1406.32 2527.01,1473.62 2519.64,1498.9C2515.44,1513.31 2499.17,1516.1 2479.62,1524.36C2471.96,1527.59 2468.21,1565.67 2427.53,1543.9",
  'conklin-lane': "M972.279,1287.16C972.279,1287.16 990.673,1279.73 1011.92,1253.24C1033.18,1226.75 1052.15,1209.01 1054.69,1207.69",
  'geronimo-path': "M1330.88,1732.12C1363.24,1780.62 1361.69,1805.33 1416.47,1809.49",
  'wappinger-court': "M1291.08,1141.55C1291.08,1141.55 1336.9,1087.07 1349.96,1078",
  'pikewood-lane': "M1514.83,1254.72L1557.65,1212.95",
  'bobwood-lane': "M1616.77,1337.63L1647.35,1289.91",
  'cowaw-road': "M1792.5,1285.57C1792.5,1285.57 1810.8,1322.18 1804.55,1344.07C1789.33,1397.36 1778.26,1395.51 1813.26,1447.16C1834,1477.76 1848.66,1506.14 1848.66,1506.14",
  'denege-circle': "M1615.23,938.034C1601.55,931.237 1602.99,918.9 1595.88,890.439",
  'oak-lane': "M1697.54,937.255C1671.62,966.604 1668.2,953.74 1636.69,946.257C1632.43,945.244 1615.27,938.052 1615.23,938.034",
  'water-lily-terrace': "M1546.54,638.95C1546.54,638.95 1572.84,641.309 1603.94,736.476",
  'mohegan-trail': "M1918.4,643.244C1918.4,643.244 2014.4,566.577 2099.87,578.842",
  'conashaugh-trail': "M1750.23,293.989C1750.23,293.989 1720.39,405.167 1716.9,419.463C1713.54,433.214 1702.86,463.318 1768.66,520.122C1788.41,537.174 1823.97,567.282 1838.56,575.797C1867.25,592.552 1895.34,607.412 1918.4,643.244C1935.83,670.321 1946.52,692.101 1963.15,715.095C1982.06,741.256 2012.2,770.29 2031.44,798.141C2051.7,827.445 2075.65,882.413 2075.65,882.413C2075.65,882.413 2089.33,894.431 2082.87,989.059C2093.92,1021.34 2086.99,1044.25 2095.18,1076.12C2104.03,1110.59 2136.14,1164.88 2149.65,1191.88C2157.32,1207.22 2165.98,1218.01 2176.24,1235.92C2226.84,1334.87 2296.16,1290.37 2346.72,1364.55C2357.14,1379.84 2357.44,1416.67 2346.77,1433.92C2334.27,1454.11 2325.73,1473.41 2305.81,1495.44C2289.66,1513.32 2276.7,1528.24 2267.97,1561.15C2263.83,1576.76 2262.99,1600.2 2261.98,1632.06C2261.65,1642.41 2261.28,1654.36 2260.8,1666.3C2260.26,1679.91 2243.36,1695.22 2214.53,1709.7C2165.55,1734.3 2106.5,1776.26 2083.95,1774.66C2059.81,1772.95 1996.4,1727.59 1949.78,1812.48C1941.81,1827 1885.13,1860.19 1865.95,1868.18",
  'philwood-lane': "M1186.05,862.958C1186.05,862.958 1129.02,956.711 1141.66,999.954C1157.71,1054.85 1192.6,1190.61 1205.93,1207.69C1235.13,1245.09 1316.19,1294.21 1360.02,1334.07C1382.56,1354.56 1461.28,1352.34 1517.65,1357.48C1540.47,1343.93 1555.29,1314.05 1555.29,1314.05",
  'seneca-drive': "M1346.67,232.793C1308.74,260.196 1231.17,278.528 1254.46,319.638C1316.11,363.006 1307.69,400.682 1330.67,417.378C1371.12,446.76 1389.04,507.411 1393.31,524.216C1403.81,565.494 1454.88,644.354 1339.79,826.711C1312,873.133 1289.9,920.712 1289.9,920.712C1289.9,920.712 1178.17,1048.12 1291.51,1140.38C1335.04,1175.82 1360.05,1183.1 1392.33,1207.83C1481.63,1276.23 1488.64,1222.1 1515.78,1257.19C1527.13,1278.31 1536.78,1298.42 1554.58,1312.61C1570.91,1325.62 1591.83,1331.59 1614.03,1338.21C1648.98,1348.63 1657.26,1396.36 1688.48,1413.64C1745.62,1445.28 1705.55,1506.09 1786.68,1526.32C1815.15,1533.43 1830.32,1520.06 1848.66,1506.14C1866,1500.56 1875.71,1474.05 1880.99,1429.08C1884.51,1399.18 1948.35,1423.57 1981.83,1387.97C2001.81,1348.32 2005.41,1339.17 2018.48,1315.45C2031.57,1291.67 2043.02,1257.31 2060.4,1245.32C2108.7,1212.02 2148.27,1250.62 2176.24,1235.92",
  'flatbrook-court': "M2018.48,1315.45C2018.48,1315.45 2057.94,1333.48 2069.72,1357.64",
  'flatbrook-way': "M1099.46,773.007C1099.46,773.007 1134.6,833.434 1186.05,862.958C1237.48,892.483 1264.47,910.689 1289.9,920.712C1324.72,934.44 1352.98,979.53 1542.25,895.712C1560.7,887.543 1596.39,889.248 1596.39,889.248C1596.39,889.248 1608.58,889.674 1613.79,891.122C1625.74,894.447 1650.51,902.424 1669.21,910.134C1681.97,915.398 1690.59,929.896 1699.89,939.447C1711.01,950.861 1724.37,964.754 1738.09,982.059C1762.52,1012.86 1766.38,1048.95 1781.98,1072.18C1841.74,1161.17 1795.56,1160.56 1885.87,1216.48C1994.53,1321.55 1976.09,1259.92 2018.48,1315.45",
  // Add more road paths as needed...
  // For brevity, I'm only including a few examples. In a real implementation,
  // you'd include all the road paths from the original SVG
};

// Methods
const getRoadPath = (roadId: string): string => {
  return roadPaths[roadId] || '';
};

const getRoadLabelPosition = (roadId: string) => {
  // Simple approach: return center of viewBox for now
  // In a real implementation, you'd calculate the center of each road's path
  const positions: Record<string, { x: number; y: number }> = {
    'indian-run-court': { x: 2400, y: 1450 },
    'conklin-lane': { x: 1000, y: 1250 },
    'geronimo-path': { x: 1375, y: 1770 },
    'wappinger-court': { x: 1320, y: 1110 },
    'seneca-drive': { x: 1600, y: 800 },
    // Add more positions as needed
  };

  return positions[roadId] || { x: 1000, y: 900 };
};

const getIntersectionPosition = (roadId: string) => {
  // Return approximate intersection points
  // This would need to be calculated based on actual path intersections
  return getRoadLabelPosition(roadId);
};

const handleRoadMouseEnter = (roadId: string) => {
  if (props.showLabels) {
    highlightRoad(roadId);
    mapStore.setHighlightedRoad(roadId);
    emit('roadHighlighted', roadId);
  }
};

const handleRoadMouseLeave = () => {
  highlightRoad(null);
  mapStore.setHighlightedRoad(null);
  emit('roadHighlighted', null);
};

const handleRoadClick = (roadId: string) => {
  selectRoad(roadId === selectedRoadId.value ? null : roadId);
  mapStore.setSelectedRoad(roadId === selectedRoadId.value ? null : roadId);
  emit('roadSelected', roadId === selectedRoadId.value ? null : roadId);
};

const handleMapMouseLeave = () => {
  if (!selectedRoadId.value) {
    highlightRoad(null);
    mapStore.setHighlightedRoad(null);
    emit('roadHighlighted', null);
  }
};

const zoomIn = () => {
  zoom.value = Math.min(3, zoom.value + 0.2);
  emit('zoomChanged', zoom.value);
};

const zoomOut = () => {
  zoom.value = Math.max(0.5, zoom.value - 0.2);
  emit('zoomChanged', zoom.value);
};

const resetView = () => {
  zoom.value = 1;
  panX.value = 0;
  panY.value = 0;
  emit('zoomChanged', zoom.value);
};

// Watch for prop changes
watch(() => props.zoom, (newZoom) => {
  zoom.value = newZoom;
});

watch(() => props.panX, (newPanX) => {
  panX.value = newPanX;
});

watch(() => props.panY, (newPanY) => {
  panY.value = newPanY;
});
</script>
<template>
  <div class="interactive-map-container">
    <svg width="100%" height="100%" viewBox="0 0 2000 1800" version="1.1" xmlns="http://www.w3.org/2000/svg"
      xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/"
      style="fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:1.5;"
      :style="{
        transform: `scale(${zoom}) translate(${panX}px, ${panY}px)`,
        transition: animateTransitions ? 'transform 0.3s ease' : 'none'
      }" @mouseleave="handleMapMouseLeave">
      <!-- Road Groups -->
      <g v-for="road in roads" :key="road.id" :id="road.id" :serif:id="road.name.toLowerCase()"
        transform="matrix(1,0,0,1,-591.034,-160.657)" class="road-group" :class="{
          'road-selected': road.isSelected,
          'road-highlighted': road.isHighlighted,
          'road-interactive': true
        }" @mouseenter="handleRoadMouseEnter(road.id)" @mouseleave="handleRoadMouseLeave"
        @click="handleRoadClick(road.id)">
        <!-- Road Path -->
        <path :d="getRoadPath(road.id)" :stroke="road.color" :stroke-width="road.strokeWidth" fill="none"
          class="road-path" />

        <!-- Road Label (if enabled) -->
        <text v-if="showLabels && (road.isSelected || road.isHighlighted)" :x="getRoadLabelPosition(road.id).x"
          :y="getRoadLabelPosition(road.id).y" text-anchor="middle" class="road-label" :style="{
            fontSize: `${12 * zoom}px`,
            fill: road.color,
            fontWeight: 'bold'
          }">
          {{ road.name }}
        </text>
      </g>

      <!-- Intersection Markers -->
      <g v-if="showIntersections && selectedRoadId" class="intersections">
        <circle v-for="intersection in currentIntersections" :key="`intersection-${intersection.id}`"
          :cx="getIntersectionPosition(intersection.id).x" :cy="getIntersectionPosition(intersection.id).y" :r="4"
          :fill="currentTheme.selectedColor" class="intersection-marker" @click="handleRoadClick(intersection.id)" />
      </g>
    </svg>

    <!-- Zoom Controls -->
    <div class="map-controls">
      <q-btn round icon="add" color="primary" size="sm" @click="zoomIn" :disable="zoom >= 3" />
      <q-btn round icon="remove" color="primary" size="sm" @click="zoomOut" :disable="zoom <= 0.5" />
      <q-btn round icon="center_focus_strong" color="primary" size="sm" @click="resetView" />
    </div>
  </div>
</template>


<style scoped>
.interactive-map-container {
  position: relative;
  width: 100%;
  height: 100%;
  background: #f8f9fa;
  border-radius: 8px;
  overflow: hidden;
}

.road-group {
  cursor: pointer;
  transition: all 0.2s ease;
}

.road-group:hover {
  filter: drop-shadow(0 0 3px rgba(255, 107, 53, 0.5));
}

.road-group.road-selected {
  filter: drop-shadow(0 0 5px rgba(78, 205, 196, 0.8));
}

.road-group.road-highlighted {
  filter: drop-shadow(0 0 3px rgba(255, 107, 53, 0.6));
}

.road-path {
  transition: stroke 0.3s ease, stroke-width 0.3s ease;
}

.road-label {
  font-family: 'Roboto', sans-serif;
  pointer-events: none;
  text-shadow: 1px 1px 2px rgba(255, 255, 255, 0.8);
}

.intersection-marker {
  cursor: pointer;
  transition: all 0.2s ease;
  opacity: 0.7;
}

.intersection-marker:hover {
  opacity: 1;
  r: 6;
}

.map-controls {
  position: absolute;
  top: 16px;
  right: 16px;
  display: flex;
  flex-direction: column;
  gap: 8px;
  z-index: 10;
}

.map-controls .q-btn {
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.9);
}
</style>
