<template>
    <q-page class="interactive-map-page">
        <div class="page-header">
            <h1 class="page-title">Interactive Conashaugh Road Map</h1>
            <p class="page-subtitle">
                Explore the community roads and intersections. Click on roads to select them, hover to highlight.
            </p>
        </div>

        <div class="map-container">
            <!-- Map Controls Panel -->
            <div class="controls-panel" :class="{ 'panel-collapsed': !showControls }">
                <q-btn round icon="settings" color="primary" class="controls-toggle"
                    @click="showControls = !showControls" />

                <div v-if="showControls" class="controls-content">
                    <!-- Search -->
                    <div class="control-section">
                        <q-input v-model="searchQuery" placeholder="Search roads..." outlined dense clearable
                            @input="handleSearch">
                            <template v-slot:prepend>
                                <q-icon name="search" />
                            </template>
                        </q-input>

                        <div v-if="searchResults.length > 0" class="search-results">
                            <q-list dense>
                                <q-item v-for="road in searchResults" :key="road.id" clickable
                                    @click="selectRoadFromSearch(road.id)"
                                    :class="{ 'selected-road': road.id === selectedRoadId }">
                                    <q-item-section>
                                        <q-item-label>{{ road.name }}</q-item-label>
                                    </q-item-section>
                                </q-item>
                            </q-list>
                        </div>
                    </div>

                    <!-- Theme Selection -->
                    <div class="control-section">
                        <q-select v-model="selectedTheme" :options="themeOptions" label="Theme" outlined dense
                            emit-value map-options @update:model-value="handleThemeChange" />
                    </div>

                    <!-- Quick Test Controls -->
                    <div class="control-section">
                        <h6 class="section-title">Quick Test Controls</h6>

                        <div class="test-controls">
                            <div class="control-group">
                                <label>Default Color:</label>
                                <input type="color" v-model="testTheme.defaultColor" @change="applyTestTheme" />
                            </div>

                            <div class="control-group">
                                <label>Highlight Color:</label>
                                <input type="color" v-model="testTheme.highlightColor" @change="applyTestTheme" />
                            </div>

                            <div class="control-group">
                                <label>Selected Color:</label>
                                <input type="color" v-model="testTheme.selectedColor" @change="applyTestTheme" />
                            </div>

                            <div class="control-group">
                                <label>Stroke Width:</label>
                                <q-slider v-model="testTheme.defaultStrokeWidth" :min="1" :max="10" :step="0.5" label
                                    @change="applyTestTheme" />
                            </div>

                            <div class="control-group">
                                <label>Highlight Stroke Width:</label>
                                <q-slider v-model="testTheme.highlightStrokeWidth" :min="1" :max="15" :step="0.5" label
                                    @change="applyTestTheme" />
                            </div>
                        </div>

                        <div class="test-buttons">
                            <q-btn size="sm" color="primary" label="Apply Theme" @click="applyTestTheme" />
                            <q-btn size="sm" color="secondary" label="Random Colors" @click="randomizeColors" />
                            <q-btn size="sm" color="negative" label="Reset" @click="resetTestTheme" />
                        </div>
                    </div>

                    <!-- Map Options -->
                    <div class="control-section">
                        <h6 class="section-title">Map Options</h6>

                        <q-toggle v-model="mapOptions.showLabels" label="Show Labels"
                            @update:model-value="updateMapOption('showLabels', $event)" />

                        <q-toggle v-model="mapOptions.showIntersections" label="Show Intersections"
                            @update:model-value="updateMapOption('showIntersections', $event)" />

                        <q-toggle v-model="mapOptions.animateTransitions" label="Animate Transitions"
                            @update:model-value="updateMapOption('animateTransitions', $event)" />
                    </div>

                    <!-- Action Buttons -->
                    <div class="control-section">
                        <div class="action-buttons">
                            <q-btn size="sm" color="primary" icon="clear_all" label="Clear Selection"
                                @click="clearSelection" />
                            <q-btn size="sm" color="secondary" icon="undo" label="Undo" :disable="!canUndo"
                                @click="undo" />
                            <q-btn size="sm" color="secondary" icon="redo" label="Redo" :disable="!canRedo"
                                @click="redo" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Map Area -->
            <div class="map-area">
                <InteractiveMapSVG :zoom="mapZoom" :pan-x="mapPanX" :pan-y="mapPanY"
                    :show-labels="mapOptions.showLabels" :show-intersections="mapOptions.showIntersections"
                    :animate-transitions="mapOptions.animateTransitions" @road-selected="handleRoadSelected"
                    @road-highlighted="handleRoadHighlighted" @zoom-changed="handleZoomChanged" />
            </div>

            <!-- Info Panel -->
            <div v-if="isInfoPanelOpen && selectedRoad" class="info-panel"
                :class="{ 'panel-expanded': isInfoPanelOpen }">
                <div class="info-header">
                    <h3>{{ selectedRoad.name }}</h3>
                    <q-btn round flat icon="close" size="sm" @click="closeInfoPanel" />
                </div>

                <div class="info-content">
                    <div class="info-item">
                        <strong>Road ID:</strong> {{ selectedRoad.id }}
                    </div>

                    <div class="info-item">
                        <strong>Current Color:</strong>
                        <span class="color-swatch" :style="{ backgroundColor: selectedRoad.color }"></span>
                        {{ selectedRoad.color }}
                    </div>

                    <div class="info-item">
                        <strong>Stroke Width:</strong> {{ selectedRoad.strokeWidth }}px
                    </div>

                    <div class="info-item">
                        <strong>Status:</strong>
                        <q-chip :color="selectedRoad.isSelected ? 'positive' : 'grey'" text-color="white" size="sm">
                            {{ selectedRoad.isSelected ? 'Selected' : 'Unselected' }}
                        </q-chip>
                    </div>

                    <!-- Intersections -->
                    <div v-if="intersectingRoads.length > 0" class="info-item">
                        <strong>Nearby Roads:</strong>
                        <div class="intersection-list">
                            <q-chip v-for="road in intersectingRoads" :key="road.id" clickable color="secondary"
                                text-color="white" size="sm" @click="selectRoadFromSearch(road.id)">
                                {{ road.name }}
                            </q-chip>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Bar -->
        <div class="status-bar">
            <div class="status-left">
                <span v-if="highlightedRoad">
                    Hovering: <strong>{{ highlightedRoad.name }}</strong>
                </span>
                <span v-else-if="selectedRoad">
                    Selected: <strong>{{ selectedRoad.name }}</strong>
                </span>
                <span v-else>
                    Hover over roads to explore, click to select
                </span>
            </div>

            <div class="status-right">
                <span>Zoom: {{ Math.round(mapZoom * 100) }}%</span>
                <span>Theme: {{ currentTheme.name }}</span>
                <span>Roads: {{ roads.length }}</span>
            </div>
        </div>
    </q-page>
</template>

<script setup lang="ts">
import { ref, computed, watch } from 'vue';
import { useQuasar } from 'quasar';
import InteractiveMapSVG from '../components/InteractiveMapSVG.vue';
import { useInteractiveMap, type MapTheme } from '../composables/useInteractiveMap';
import { useMapStore } from '../stores/map-store';

// Quasar
const $q = useQuasar();

// Composables
const {
    roads,
    currentTheme,
    themes,
    selectedRoadId,
    selectedRoad,
    highlightedRoad,
    selectRoad,
    setTheme,
    clearSelection: clearMapSelection,
    searchRoads,
    findIntersections,
} = useInteractiveMap();

const mapStore = useMapStore();

// Local state
const showControls = ref(true);
const searchQuery = ref('');
const mapZoom = ref(1);
const mapPanX = ref(0);
const mapPanY = ref(0);

const mapOptions = ref({
    showLabels: true,
    showIntersections: true,
    animateTransitions: true,
});

const testTheme = ref<MapTheme>({
    name: 'Custom Test',
    defaultColor: '#323232',
    highlightColor: '#ff6b35',
    selectedColor: '#4ecdc4',
    defaultStrokeWidth: 2,
    highlightStrokeWidth: 4,
});

// Computed
const searchResults = computed(() => {
    if (!searchQuery.value) return [];
    return searchRoads(searchQuery.value);
});

const selectedTheme = ref(currentTheme.value.name);

const themeOptions = computed(() =>
    themes.value.map(theme => ({
        label: theme.name,
        value: theme.name,
    }))
);

const isInfoPanelOpen = computed(() => mapStore.isInfoPanelOpen && !!selectedRoad.value);

const intersectingRoads = computed(() => {
    return selectedRoadId.value ? findIntersections(selectedRoadId.value) : [];
});

const canUndo = computed(() => mapStore.canUndo);
const canRedo = computed(() => mapStore.canRedo);

// Methods
const handleSearch = () => {
    mapStore.setSearchQuery(searchQuery.value);
};

const selectRoadFromSearch = (roadId: string) => {
    selectRoad(roadId);
    mapStore.setSelectedRoad(roadId);
    searchQuery.value = '';
};

const handleThemeChange = (themeName: string) => {
    const theme = themes.value.find(t => t.name === themeName);
    if (theme) {
        setTheme(theme);
        testTheme.value = { ...theme };
    }
};

const applyTestTheme = () => {
    setTheme(testTheme.value);
    selectedTheme.value = testTheme.value.name;
};

const randomizeColors = () => {
    const colors = ['#e74c3c', '#3498db', '#2ecc71', '#f39c12', '#9b59b6', '#1abc9c', '#e67e22', '#95a5a6'];
    testTheme.value.defaultColor = colors[Math.floor(Math.random() * colors.length)] || '#323232';
    testTheme.value.highlightColor = colors[Math.floor(Math.random() * colors.length)] || '#ff6b35';
    testTheme.value.selectedColor = colors[Math.floor(Math.random() * colors.length)] || '#4ecdc4';
    applyTestTheme();
};

const resetTestTheme = () => {
    const defaultTheme = themes.value[0];
    if (defaultTheme) {
        testTheme.value = { ...defaultTheme };
        applyTestTheme();
    }
};

const updateMapOption = (key: keyof typeof mapOptions.value, value: boolean) => {
    mapStore.updateUserPreference(key, value);
};

const handleRoadSelected = (roadId: string | null) => {
    // Event handler for map component - sync with store if needed
    console.log('Road selected:', roadId);
};

const handleRoadHighlighted = (roadId: string | null) => {
    // Event handler for map component - sync with store if needed
    console.log('Road highlighted:', roadId);
};

const handleZoomChanged = (zoom: number) => {
    mapZoom.value = zoom;
    mapStore.setZoom(zoom);
};

const clearSelection = () => {
    clearMapSelection();
    mapStore.clearSelection();
};

const closeInfoPanel = () => {
    mapStore.closeInfoPanel();
};

const undo = () => {
    mapStore.undo();
};

const redo = () => {
    mapStore.redo();
};

// Initialize test theme
watch(currentTheme, (newTheme) => {
    testTheme.value = { ...newTheme };
}, { immediate: true });

// Sync with map store
watch(() => mapStore.selectedRoadId, (newRoadId) => {
    if (newRoadId !== selectedRoadId.value) {
        selectRoad(newRoadId);
    }
});

// Show success message when road is selected
watch(selectedRoad, (newRoad) => {
    if (newRoad) {
        $q.notify({
            message: `Selected: ${newRoad.name}`,
            color: 'positive',
            position: 'top',
            timeout: 2000,
        });
    }
});
</script>

<style scoped>
.interactive-map-page {
    padding: 0;
    height: 100vh;
    display: flex;
    flex-direction: column;
}

.page-header {
    padding: 16px 24px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    text-align: center;
}

.page-title {
    margin: 0 0 8px 0;
    font-size: 2rem;
    font-weight: 300;
}

.page-subtitle {
    margin: 0;
    opacity: 0.9;
}

.map-container {
    flex: 1;
    position: relative;
    display: flex;
    overflow: hidden;
}

.controls-panel {
    position: absolute;
    top: 16px;
    left: 16px;
    z-index: 100;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    max-width: 320px;
    max-height: calc(100vh - 200px);
    overflow-y: auto;
}

.panel-collapsed {
    width: 48px;
    height: 48px;
}

.controls-toggle {
    position: absolute;
    top: 8px;
    right: 8px;
    z-index: 101;
}

.controls-content {
    padding: 16px;
    padding-top: 56px;
}

.control-section {
    margin-bottom: 24px;
}

.section-title {
    margin: 0 0 12px 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: #666;
}

.search-results {
    margin-top: 8px;
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
}

.selected-road {
    background-color: #e3f2fd;
}

.test-controls {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.control-group {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 8px;
}

.control-group label {
    font-size: 0.875rem;
    min-width: 100px;
}

.control-group input[type="color"] {
    width: 40px;
    height: 32px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.test-buttons {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    margin-top: 12px;
}

.action-buttons {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
}

.map-area {
    flex: 1;
    background: #f8f9fa;
}

.info-panel {
    position: absolute;
    top: 16px;
    right: 16px;
    width: 300px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    z-index: 100;
    transform: translateX(100%);
    transition: transform 0.3s ease;
}

.panel-expanded {
    transform: translateX(0);
}

.info-header {
    padding: 16px;
    border-bottom: 1px solid #e0e0e0;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.info-header h3 {
    margin: 0;
    font-size: 1.125rem;
    font-weight: 600;
}

.info-content {
    padding: 16px;
}

.info-item {
    margin-bottom: 12px;
}

.info-item:last-child {
    margin-bottom: 0;
}

.color-swatch {
    display: inline-block;
    width: 16px;
    height: 16px;
    border-radius: 2px;
    margin: 0 8px;
    vertical-align: middle;
    border: 1px solid #ccc;
}

.intersection-list {
    margin-top: 8px;
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
}

.status-bar {
    padding: 12px 24px;
    background: #2c3e50;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.875rem;
}

.status-left strong {
    color: #3498db;
}

.status-right {
    display: flex;
    gap: 16px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .controls-panel {
        max-width: 280px;
    }

    .info-panel {
        width: 250px;
    }

    .status-bar {
        flex-direction: column;
        gap: 8px;
        text-align: center;
    }

    .status-right {
        justify-content: center;
    }
}
</style>
